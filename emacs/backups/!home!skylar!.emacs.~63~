

;; Disable unused UI elements
;; Don't show startup screen, we don't need it
(setq inhibit-startup-message t)

;;Disable GUI features we're not using
(menu-bar-mode -1)
(tool-bar-mode -1)


;;Highlight the current line
;;(global-hl-line-mode t)

;;Show line number
(line-number-mode t)

;;No UI prompts.
(setq use-dialog-box nil)

;;Dired auto-refresh
(setq global-auto-revert-non-file-buffers t)

;;Show  clock in the mode line
(display-time-mode 1)

;; set transparency
(set-frame-parameter (selected-frame) 'alpha '(95 95))
(add-to-list 'default-frame-alist '(alpha 95 95))

;; BETTER DEFAULTS

;;Give us the ability to remember recently viewed files
(recentf-mode 1)


;; Display column number in mode line.
(column-number-mode t)

;; Automatically update buffers if file content on the disk has changed.
(global-auto-revert-mode t)

;; `C-x o' is a 2 step key binding. `M-o' is much easier.
(global-set-key (kbd "M-o") 'other-window)

;; Emacs can automatically create backup files. This tells Emacs to put all backups in
;; ~/.emacs.d/backups. More info:
;; http://www.gnu.org/software/emacs/manual/html_node/elisp/Backup-Files.html
(setq backup-directory-alist '(("." . "~/.config/emacs/backups")))
(with-eval-after-load 'tramp
  (add-to-list 'tramp-backup-directory-alist
               (cons tramp-file-name-regexp nil)))

(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)
(setq auto-save-file-name-transforms '((".*" "~/.config/emacs/auto-save-list/" t)))


;;PACKAGES
;; Require and initialize `package`.
(require 'package)

;; Add `melpa` to `package-archives`.
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)

(package-initialize)

(use-package winner
  :defer t)

;;LSP
(add-to-list 'eglot-server-programs '(markdown-mode . ("marksman")))
(add-hook 'markdown-mode-hook #'eglot-ensure)



;; Do not use a different background color for comments.
(setq spacemacs-theme-comment-bg nil)

;; Comments should appear in italics.
(setq spacemacs-theme-comment-italic t)




;; Use the `spacemacs-dark` theme.
(use-package spacemacs-common
  :ensure spacemacs-theme)

(setq global-sompany-dely 0.3)
(global-company-mode t)

;;Theming
(set-background-color "#242c39")
(set-cursor-color "#a2b3b3")
(set-foreground-color "#ecdacc")
;;(set-default-font "lucidasanstypewriter-14")

;;MACROS

;;Only define macros we need for the major mode we're in

;;General
(fset 'indt
      (kmacro-lambda-form [?\C-x ?h tab] 0 "%d"))

;;Latex
(if (eq major-mode 'latex-mode)
    ;;Enviornments
    (fset 'dfn
	  (kmacro-lambda-form [?\\ ?b ?e ?g ?i ?n ?\{ ?D ?e ?f ?i ?n ?i ?t ?i ?o ?n ?\} return return ?\\ ?e ?n ?d ?\{ ?D ?e ?f ?i ?n ?i ?t ?i ?o ?n ?\} up up ?\C-e ?\[ ?\] left] 0 "%d"))
  (fset 'dfn
	(kmacro-lambda-form [?\\ ?b ?e ?g ?i ?n ?\{ ?D ?e ?f ?i ?n ?i ?t ?i ?o ?n ?\} return return ?\\ ?e ?n ?d ?\{ ?D ?e ?f ?i ?n ?i ?t ?i ?o ?n ?\} up up ?\C-e ?\[ ?\] left] 0 "%d"))
  (fset 'eqn
	(kmacro-lambda-form [?\\ ?b ?e ?g ?i ?n ?\{ ?E ?q ?u ?a ?t ?i ?o ?n ?\} return return tab ?\\ ?e ?n ?d ?\{ ?E ?q ?u ?a ?t ?i ?o ?n ?\} tab up tab] 0 "%d"))
  (fset 'exm
	(kmacro-lambda-form [?\\ ?b ?e ?g ?i ?n ?\{ ?E ?x ?a ?m ?p ?l ?e ?\} return ?\\ ?e ?n ?d ?\{ ?E ?x ?a ?m ?p ?l ?e ?\} up return down tab up] 0 "%d"))
  (fset 'ltt
	(kmacro-lambda-form [?\\ ?b ?e ?g ?i ?n ?\{ ?a ?l ?l ?t ?t ?\} return return ?\\ ?e ?n ?d ?\{ ?a ?l ?l ?t ?t ?\} tab up] 0 "%d"))
  (fset 'nmt
	(kmacro-lambda-form [?\\ ?\[ ?\\ ?\] left left] 0 "%d"))



  ;;Formatting
  (fset 'bf
	(kmacro-lambda-form [?\\ ?t ?e ?x ?t ?b ?f ?\{ ?\} left] 0 "%d"))
  (fset 'it
	(kmacro-lambda-form [?\\ ?t ?e ?x ?t ?i ?t ?\{ ?\} left] 0 "%d"))
  (fset 'ul
	(kmacro-lambda-form [?\\ ?u ?n ?d ?e ?r ?l ?i ?n ?e ?\{ ?\} left] 0 "%d"))
  (fset 'ttt
	(kmacro-lambda-form [?\\ ?t ?e ?x ?t ?t ?t ?\{ ?\} left] 0 "%d"))
  (fset 'mt
	(kmacro-lambda-form [?$ ?$ left] 0 "%d"))


  )

;;C


;;Python

;;HTML

;;CSS

;;Java

;;END MACROS

;;Org stuff
(setq org-ellipsis " ▼")
;;(org-hide-emphasis-markers t)
(require 'org-superstar)
(add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))

  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

(setq org-todo-keywords
    '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
      (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

 (setq org-tag-alist
    '((:startgroup)
       ; Put mutually exclusive tags here
       (:endgroup)
       ("@errand" . ?E)
       ("@home" . ?H)
       ("@work" . ?W)
       ("agenda" . ?a)
       ("planning" . ?p)
       ("publish" . ?P)
       ("batch" . ?b)
       ("note" . ?n)
       ("idea" . ?i)))

 ;; Configure custom agenda views
  (setq org-agenda-custom-commands
   '(("d" "Dashboard"
     ((agenda "" ((org-deadline-warning-days 7)))
      (todo "NEXT"
        ((org-agenda-overriding-header "Next Tasks")))
      (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

    ("n" "Next Tasks"
     ((todo "NEXT"
        ((org-agenda-overriding-header "Next Tasks")))))

    ("W" "Work Tasks" tags-todo "+work-email")

    ;; Low-effort next actions
    ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
     ((org-agenda-overriding-header "Low Effort Tasks")
      (org-agenda-max-todos 20)
      (org-agenda-files org-agenda-files)))

    ("w" "Workflow Status"
     ((todo "WAIT"
            ((org-agenda-overriding-header "Waiting on External")
             (org-agenda-files org-agenda-files)))
      (todo "REVIEW"
            ((org-agenda-overriding-header "In Review")
             (org-agenda-files org-agenda-files)))
      (todo "PLAN"
            ((org-agenda-overriding-header "In Planning")
             (org-agenda-todo-list-sublevels nil)
             (org-agenda-files org-agenda-files)))
      (todo "BACKLOG"
            ((org-agenda-overriding-header "Project Backlog")
             (org-agenda-todo-list-sublevels nil)
             (org-agenda-files org-agenda-files)))
      (todo "READY"
            ((org-agenda-overriding-header "Ready for Work")
             (org-agenda-files org-agenda-files)))
      (todo "ACTIVE"
            ((org-agenda-overriding-header "Active Projects")
             (org-agenda-files org-agenda-files)))
      (todo "COMPLETED"
            ((org-agenda-overriding-header "Completed Projects")
             (org-agenda-files org-agenda-files)))
      (todo "CANC"
            ((org-agenda-overriding-header "Cancelled Projects")
             (org-agenda-files org-agenda-files)))))))
;;(require 'org-habit)


(setq org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●"))
(setq org-agenda-start-with-log-mode t)
(setq org-agenda-files '("~/OrgFiles/*"))
(setq org-log-into-drawer t)
(advice-add 'org-refile :after 'org-save-all-org-buffers)


(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-enabled-themes '(skylar))
 '(custom-safe-themes
   '("15609c42487cd4189b321995f728926c4cc0661ca79691875b48eaff8bdebb2c" "323201f226bd9215f616a38d170afc945f27cd28d7d0094380b237f7a8a69ab1" "493314aea5f38d5f74de9179d4082b3750c4b65501c8d6c26207976a23fc9f5d" "d2af2c85a7a051a36aa933a1f1f4af2c463080d2d86550581efdd6269cd2c905" "bffa9739ce0752a37d9b1eee78fc00ba159748f50dc328af4be661484848e476" default))
 '(org-agenda-files nil)
 '(package-selected-packages
   '(ivy lsp-ui lsp-mode eglot org-babel-eval-in-repl org-agenda-property org-superstar org-bullets org org-roam org-modern no-littering powerline yasnippet use-package spacemacs-theme company))
 '(warning-suppress-types '((auto-save))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-state ((t (:foreground "#90af50"))))
 '(font-lock-comment-face ((t (:foreground "#97b7bc" :slant italic))))
 '(font-lock-constant-face ((t (:foreground "#a68dc0"))))
 '(font-lock-function-name-face ((t (:inherit bold :foreground "#ffb34d"))))
 '(font-lock-keyword-face ((t (:inherit bold :foreground "#4673b2" :slant normal))))
 '(font-lock-preprocessor-face ((t (:foreground "#a2b3b3"))))
 '(font-lock-string-face ((t (:foreground "#adc463"))))
 '(font-lock-type-face ((t (:inherit bold :foreground "#ca695d"))))
 '(font-lock-variable-name-face ((t (:foreground "#4763b2"))))
 '(font-lock-warning-face ((t (:background "#292b2e" :foreground "#ffb34d"))))
 '(hl-line ((t (:extend t :background "#66717b"))))
 '(tex-math ((t (:inherit font-lock-string-face :slant italic)))))

